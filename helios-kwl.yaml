esphome:
  name: helios-kwl
  platform: ESP32
  board: wemos_d1_mini32
  includes:
    - helios-kwl.h


# Enable logging
logger:
  level: DEBUG
  #baud_rate: 0

# Enable Home Assistant API
api:
  password: !secret api_key

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ".localdomain"

status_led:
  pin: GPIO2

sensor:
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 30s

  - name: "Temperature outside"
    id: sensor_temperature_outside
    platform: template
    unit_of_measurement: "째C"
    accuracy_decimals: 0
    lambda: "return {};"
  - name: "Temperature exhaust"
    id: sensor_temperature_exhaust
    platform: template
    unit_of_measurement: "째C"
    accuracy_decimals: 0
    lambda: "return {};"
  - name: "Temperature inside"
    id: sensor_temperature_inside
    platform: template
    unit_of_measurement: "째C"
    accuracy_decimals: 0
    lambda: "return {};"
  - name: "Temperature incoming"
    id: sensor_temperature_incoming
    platform: template
    unit_of_measurement: "째C"
    accuracy_decimals: 0
    lambda: "return {};"
  - name: "Fan speed"
    id: fan_speed
    platform: template
    accuracy_decimals: 0
    lambda: "return {};"

binary_sensor:
  - name: "Power state"
    id: power_state
    platform: template
    device_class: power
    lambda: "return {};"
  - name: "By-pass state"
    id: bypass_state
    platform: template
    lambda: "return {};"
  - name: "Heating indicator"
    id: heating_indicator
    platform: template
    device_class: heat
    lambda: "return {};"
  - name: "Fault indicator"
    id: fault_indicator
    platform: template
    device_class: problem
    lambda: "return {};"
  - name: "Service reminder"
    id: service_reminder
    platform: template
    lambda: "return {};"

switch:
  - platform: output
    name: "Winter mode"
    output: helios_kwl_winter

uart:
  id: uart_bus
  tx_pin: 16
  rx_pin: 17
  baud_rate: 9600
  #debug:
    #dummy_receiver: true

custom_component:
  - lambda: |-
      auto helios_kwl = new HeliosKwlComponent(
        id(uart_bus),
        id(fan_speed),
        id(sensor_temperature_outside),
        id(sensor_temperature_exhaust),
        id(sensor_temperature_inside),
        id(sensor_temperature_incoming),
        id(power_state),
        id(bypass_state),
        id(heating_indicator),
        id(fault_indicator),
        id(service_reminder)
      );
      App.register_component(helios_kwl);
      return {helios_kwl};

    components:
      id: helios_kwl

fan:
  - platform: speed
    output: helios_kwl_speed
    speed_count: 8
    name: "Fan speed"

output:
  - platform: custom
    type: float
    lambda: |-
      auto helios_kwl_speed = new HeliosKwlSpeedOutput(
        static_cast<HeliosKwlComponent*>(id(helios_kwl))
      );
      App.register_component(helios_kwl_speed);
      return {helios_kwl_speed};

    outputs:
      id: helios_kwl_speed

  - platform: custom
    type: binary
    lambda: |-
      auto helios_kwl_winter = new HeliosKwlWinterModeOutput(
        static_cast<HeliosKwlComponent*>(id(helios_kwl))
      );
      App.register_component(helios_kwl_winter);
      return {helios_kwl_winter};

    outputs:
      id: helios_kwl_winter
